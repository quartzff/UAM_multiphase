%% Minimize control effort for UAM cruise, descent, and landing
% Using trapezoidal discretization, choose X and U as design variables
% Time-varying A; fixed B & b through the whole recursive process

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           Preparation                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all
clear all
clc
format long

k=1;
kk=0;
for k = 1:300
k
% Constants
variation_percent = 0.05;  % 10% variation
nn = 1;
% Vehicle's mass with 10% variation
m_base = 240;  % original mass, kg
m_variation = variation_percent * m_base * (2*rand - 1);  % ±10% variation
%m_variation = variation_percent * m_base * (2*nn - 1);  % ±10% variation
m = m_base + m_variation;  % new mass
m = 240;
% Air density with 10% variation
rho_base = 1.225;  % original air density, kg/m^3
rho_variation = variation_percent * rho_base * (2*rand - 1);  % ±10% variation
rho = rho_base + rho_variation;  % new air density
rho = 1.225;
% Other parameters remain the same
Sx = 2.11;  % vehicle's frontal area, m^2
Sz = 1.47;  % drag coefficient
g = 9.81;  % gravitational acceleration, m/s^2
CD = 1;    % drag coefficient

% Initial reference trajectory with variations for z0, vx0, x1, z1
z0_base = 500;  % initial value of z0
z0_variation = variation_percent * z0_base * (2*0.5*rand - 1);
%z0_variation = variation_percent * z0_base * (2*0.5 - 1);
z0 = z0_base + z0_variation;
%z0 = 500;

vx0_base = 13.85;  % initial value of vx0
vx0_variation = variation_percent * vx0_base * (2*rand - 1);
%vx0_variation = variation_percent * vx0_base * (2*nn - 1);
vx0 = vx0_base + vx0_variation;
%vx0 = 13.85;
x1_base = 10000;  % initial value of x1
x1_variation = variation_percent * x1_base * (2*rand - 1);
%x1_variation = variation_percent * x1_base * (2*nn - 1);
x1 = x1_base + x1_variation;
x1 = 10000;
z1_base = 500;  % initial value of z1
z1_variation = variation_percent * z1_base * (2*rand - 1);
%z1_variation = variation_percent * z1_base * (2*nn - 1);
z1 = z1_base + z1_variation;
%z1 = 500;

%---------------------- Initial reference trajectory ----------------------
x0 = 0;         % initial along-track distance, m
%z0 = 500;       % initial altitude, m
%vx0 = 13.85;    % initial along-track airspeed, m/s
vz0 = 0;        % initial vertical airspeed, m/s

%x1 = 10000;         % phase 1 along-track distance, m
%z1 = 500;       % phase 1 altitude, m
vx1 = 0;    % phase 1 along-track airspeed, m/s
vz1 = 0;        % phase 1 vertical airspeed, m/s

xf = 20000;     % final along-track distance, m
zf = 0;         % final altitude, m
vxf = 0;        % final along-track airspeed, m/s
vzf = 0;        % final vertical airspeed, m/s

vmax   = 27.78;    % maximum airspeed
Tmin   = 0;      % minimum net thrust
Tmax   = 4800;   % maximum net thrust, N
thetamin = -6*pi/180;    % minimum rotor tip-path-plane pitch angle
thetamax = 6*pi/180;   % maximum rotor tip-path-plane pitch angle

t0 = 0;
tf = 25*60;     % required time of arrival (RTA), min







%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       Modeling & Optimization                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Max_iter = 15;   % Maximum number of iteration
col_points = 30;
col_points2 = 30;
tau = linspace(0,1,col_points)';
tau1 = linspace(0,1,col_points2)';
step = tau(2)-tau(1);
N = length(tau)+length(tau1);   % N nodes
sigma_guess = x1/ 13.85; %730; 

sigma2_guess = 1500-sigma_guess;

x1 = linspace(x0,x1,col_points)';
z1 = linspace(z0,z1,col_points)';
vx1 = linspace(vx0,vx1,col_points)';
vz1 = linspace(vz0,vz1,col_points)';

x2 = linspace(x1(end),xf,col_points2)';
z2 = linspace(z1(end),zf,col_points2)';
vx2 = linspace(vx1(end),vxf,col_points2)';
vz2 = linspace(vz1(end),vzf,col_points2)';
 x = [x1;x2];
 z = [z1;z2];
 vx = [vx1;vx2];
 vz = [vz1;vz2];

X = sdpvar(4,N);
U = sdpvar(2,N);
Sigma = sdpvar(1,1);
Sigma2 = sdpvar(1,1);

State_all = zeros(4*N, Max_iter+1);
State_all(:,1) = [x; z; vx; vz];
Control_all = zeros(2*N, Max_iter);
Del_state = zeros(6, Max_iter);
Sigma_all = zeros(1, Max_iter+1);
Sigma2_all = zeros(1, Max_iter+1);
Sigma_all(:,1) = sigma_guess;
Sigma2_all(:,1) = sigma2_guess;
X(:,1) = [x0; z0; vx0; vz0];
% U(:,1) = [0; 0; 0];
sigma = sigma_guess;
sigma2 = sigma2_guess;
u1 = zeros(N,1)*210;
u2 = zeros(N,1)*2300;
%u3 = ones(N,1)*2300^2;

%--------------------------- Iteration procedure --------------------------
aa = 1;
for Index = 1:Max_iter
    
    Cons = [];
    % Recursively compute each state (A and B are constant for each step)
    J = 0;
    for i = 1:N-1
       % Cons = Cons + [  Sigma == 1500 ];
        % From last step
        x01  = x(i); z01  = z(i); vx01 = vx(i); vz01 = vz(i);
        x02  = x(i+1); z02  = z(i+1); vx02 = vx(i+1); vz02 = vz(i+1);
        u1_01 = u1(i); u2_01 = u2(i); 
        u1_02 = u1(i+1); u2_02 = u2(i+1); 
        phase_node = col_points;
        if i <=  col_points

        [H1, H2, G1, G2, b1, b2] = ComDyn(x01,z01,vx01, vz01, x02, z02, vx02, vz02, u1_01, u2_01, u1_02, u2_02, sigma, Sigma, step, m, rho, CD, Sx, Sz, g);
        
        %---Linearized dynamics
        Cons = Cons + [ -H1*X(:,i) + H2*X(:,i+1) - G1*U(:,i) - G2*U(:,i+1) == 0.5*step*(b1+b2) ];  % N
%         X(:,i+1) = inv(H2) * (H1*X(:,i) + G1*U(:,i) + G2*U(:,i+1) + 0.5*step*(b1+b2));
        J = J + (1/1e9*step*(sigma*(u1_01^2 + u2_01^2)+sigma*((U(1,i)^2+U(2,i)^2)-(u1_01^2 + u2_01^2))+(u1_01^2 + u2_01^2)*(Sigma-sigma)));
        
        else 
        [H1, H2, G1, G2, b1, b2] = ComDyn(x01,z01,vx01, vz01, x02, z02, vx02, vz02, u1_01, u2_01, u1_02, u2_02, sigma2, Sigma2, step, m, rho, CD, Sx, Sz, g);
        
        
        %---Linearized dynamics
        Cons = Cons + [ -H1*X(:,i) + H2*X(:,i+1) - G1*U(:,i) - G2*U(:,i+1) == 0.5*step*(b1+b2) ];  % N
        
        J = J + (1/1e9*step*(sigma2*(u1_01^2 + u2_01^2)+sigma2*((U(1,i)^2+U(2,i)^2)-(u1_01^2 + u2_01^2))+(u1_01^2 + u2_01^2)*(Sigma2-sigma2)));
        end
        %---State constraints
        Cons = Cons + [ x0 <= X(1,i+1) <= xf ];
        Cons = Cons + [ zf <= X(2,i+1) <= z0 ];
        Cons = Cons + [ 0  <= X(3,i+1) <= vmax ];
        Cons = Cons + [ X(1, phase_node) == x1 ];
        Cons = Cons + [ X(2, phase_node) == z0 ];
        Cons = Cons + [ X(1, phase_node +1) == x1 ];
        Cons = Cons + [ X(2, phase_node +1) == z0 ];
        Cons = Cons + [ -vmax <= X(4,i+1) <= 0 ];
        Cons = Cons + [ sqrt(X(3,i+1)^2 + X(4,i+1)^2) <= vmax ];
%         Cons = Cons + [ X(3,i+1)^2 + X(4,i+1)^2 <= vmax^2 ];
        
        %---Objective
        %J = J + 1/1e9*step*1/2*U(3,i)^2;
        
    end
    
    %---Objective function(functional)
    Objective = J;
    
    %---Control constraints
    for j = 1:N-1
        Cons = Cons + [ U(2,j)*tan(-thetamax) <= U(1,j) <= U(2,j)*tan(thetamax) ];
        %Cons = Cons + [ 0 <= U(3,j) <= Tmax^2 ];
        %Cons = Cons + [ U(3,j) == Tmax^2 ];
        Cons = Cons + [ U(1,j)^2 + U(2,j)^2 <= Tmax^2 ];
    end
    Cons = Cons + [  Sigma + Sigma2 == 1500 ];% added time constraint
    Cons = Cons + [ 690 <= Sigma <= 800 ];% added time constraint
    Cons = Cons + [ 690 <= Sigma2 <= 800 ];% added time constraint
    %Cons = Cons + [ Sigma == 733.8 ];
    %---Trust-region constraint
    % |X-Xk|<delta
    Xk = [x'; z'; vx'; vz']; % X_k-1
    delta = [2e3*ones(1,N); 5e2*ones(1,N); 50*ones(1,N); 50*ones(1,N)];
    Cons = Cons + [ -delta <= X-Xk <= delta ];
    
    
    delta1 =0.5*sigma_guess ;
    Cons = Cons + [ -delta1 <= Sigma-sigma <= delta1 ];
    
    delta2 =0.5*sigma2_guess ;
    Cons = Cons + [ -delta1 <= Sigma2-sigma2 <= delta2 ];
    %---Convergence constraint
%     if Index > 1
%         coef = 0.95;
%         delta2 = coef*abs(Xk-Xk1);
%         Cons = Cons + [ -delta2 <= X-Xk <= delta2 ];
%     end

    %---Terminal constraints
    Cons = Cons + [ X(1,N) == xf ];
    Cons = Cons + [ X(2,N) == zf ];
    Cons = Cons + [ X(3,N) == vxf ];
    Cons = Cons + [ X(4,N) == vzf ];
    
    %------------------------- Solve the problem --------------------------
    tic
     %options = sdpsettings('verbose',0,'solver','sedumi');
     options = sdpsettings('verbose',0,'solver','mosek');
     %options = sdpsettings('verbose',0,'solver','ecos','ecos.maxit',150);
     %options = sdpsettings('verbose',0,'solver','ecos');
    %options = sdpsettings('verbose',0,'solver','quadprogbb');
     %options = sdpsettings('verbose',0,'solver','sdpt3');
    
    sol = optimize(Cons, Objective, options);
    sol.info
    CPU_time(Index) = toc;
    
    % Check convergence condition and update
    x_opt  = value(X(1,:))';
    z_opt  = value(X(2,:))';
    vx_opt = value(X(3,:))';
    vz_opt = value(X(4,:))';
    u1_opt = value(U(1,:))';
    u2_opt = value(U(2,:))';
    
    sigma_opt = value(Sigma)';
    sigma2_opt = value(Sigma2)';
    
    State_all(:,Index+1) = [x_opt; z_opt; vx_opt; vz_opt];
    Control_all(:,Index) = [u1_opt; u2_opt];
    Sigma_all(:,Index+1) = sigma_opt;
    Sigma2_all(:,Index+1) = sigma2_opt;
    
    del = zeros(6,1);
    del(1) = max(abs(x_opt-x));
    del(2) = max(abs(z_opt-z));
    del(3) = max(abs(vx_opt-vx));
    del(4) = max(abs(vz_opt-vz));
    del(5) = max(abs(sigma_opt-sigma));
    del(6) = max(abs(sigma2_opt-sigma2));
    Del_state(:,Index) = del;
    
    Index
    max_error         = del               % output error between two steps
    Conv_I(Index)     = Index;            % record number of steps
    Conv_x(Index)     = del(1);
    Conv_z(Index)     = del(2);
    Conv_vx(Index)    = del(3);
    Conv_vz(Index)    = del(4);
    Conv_sigma(Index)   = del(5);
    Conv_sigma2(Index)   = del(6);
    Obj(Index)        = value(Objective); % record objective for each step
    crit = 1.2;
    aa = aa+1;
    if (del(1) <= crit) && (del(2) <= crit) && (del(3) <= crit)&& (del(4) <= crit)&& (del(5) <= crit)&& (del(6) <= crit)
        all_ind(k) = Index; 
        break;
    else
        Xk1 = [x'; z'; vx'; vz']; % X_k-2
        x     = x_opt;
        z     = z_opt;
        vx    = vx_opt;
        vz    = vz_opt;
        sigma = sigma_opt;
        sigma2 = sigma2_opt;
        u1 = u1_opt;
        u2 = u2_opt;

    end
end
if aa > 15
    kk = kk +1;
end

all_z(:,k) =  z_opt;
all_x(:,k) =  x_opt;
all_vx(:,k) = vx_opt;
all_vz(:,k) = vz_opt;
all_u1(:,k) = u1_opt;
all_u2(:,k) = u2_opt;
all_t(:,k) = [sigma_opt*tau;(sigma_opt+sigma2_opt)*tau1];
all_obj(:,k) = value(Objective);
end
% assuming all_t, all_x, all_z are your 110x100 matrices
numTrails = size(all_t, 2);  % get the number of columns, which is the number of trails

% Generate a colormap
colors = jet(numTrails);

% Create a new figure for each plot


figure;
hold on;
for i = 1:numTrails
    plot(all_x(:,i), all_z(:,i), 'Color', colors(i,:));
end
xlabel('Along track distance (m)','FontSize',18)
ylabel('Altitude (m)','FontSize',18)
set(gca,'Fontsize',19)
hold off;


figure;
hold on;
for i = 1:numTrails
    plot( all_x(:,i),all_vx(:,i), 'Color', colors(i,:));
end
xlabel('Along track distance (m)','FontSize',18)
ylabel('Speed (m/s)','FontSize',18)
set(gca,'Fontsize',19)
hold off;


CPU_time = sum(CPU_time)